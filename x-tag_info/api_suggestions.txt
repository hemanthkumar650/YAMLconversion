Security: Basic_Authorization
Path: /fleets
  - HTTP Method: get
    - Tag: Fleet
    - Summary: List Fleets
    - Description: Returns list of fleets sorted lexicographically
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}
  - HTTP Method: put
    - Tag: Fleet
    - Summary: Create Fleet
    - Description: Returns the created fleet
    - Parameter Reference: #/components/parameters/fleetId
    - Response 201: OK
    - Response 400: 
    - Response 409: The fleetId already exist
  - HTTP Method: patch
    - Tag: Fleet
    - Summary: Update Fleet
    - Description: Returns update status
    - Parameter Reference: #/components/parameters/fleetId
    - Response 200: OK
    - Response 400: 
    - Response 404: 
  - HTTP Method: get
    - Tag: Fleet
    - Summary: Fleet Details
    - Description: Returns fleet details
    - Parameter Reference: #/components/parameters/fleetId
    - Response 200: OK
    - Response 400: 
    - Response 404: The fleetId doesn't exist
Path: /fleets/{fleetId}/drivers
  - HTTP Method: get
    - Tag: Fleet
    - Summary: List Fleet Drivers
    - Description: Returns list of drivers in the input fleet who took trips in the input time interval
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/dutyType
    - Parameter Reference: #/components/parameters/before
    - Parameter Reference: #/components/parameters/after
    - Parameter Reference: #/components/parameters/division
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/trips
  - HTTP Method: get
    - Tag: Fleet
    - Summary: List Fleet Trips
    - Description: Lists the trips taken by the fleet
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/before
    - Parameter Reference: #/components/parameters/after
    - Parameter Reference: #/components/parameters/dutyType
    - Parameter Reference: #/components/parameters/division
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/customTripParams
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/ongoing-trips
  - HTTP Method: get
    - Tag: Fleet
    - Summary: List Fleet Ongoing Trips
    - Description: Lists the ongoing trips for the fleet sorted by startTime in the order specified by the 'sort' parameter
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/latest-trips-by-asset-id
  - HTTP Method: get
    - Tag: Fleet
    - Summary: List Fleet Latest Trips
    - Description: Lists the latest trip by every asset of the fleet sorted by assetId in the order specified by the 'sort' parameter
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/ignitions/{ignitionId}/trips
  - HTTP Method: get
    - Tag: Fleet
    - Summary: List Fleet Trips by Ignition ID
    - Description: Lists the trips taken by the fleet for a specific ignition ID
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/ignitionId
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/ignitions/${ignitionId}
  - HTTP Method: get
    - Tag: Fleet
    - Summary: Fetch Ignition details
    - Description: Returns details of an Ignition on-off period by ignition ID
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/ignitionId
    - Response 200: OK
    - Response 400: 
    - Response 404: Could not find matching ignition record
Path: /fleets/{fleetId}/violations
  - HTTP Method: get
    - Tag: Fleet
    - Summary: List Fleet Violations
    - Description: Lists the violations made by the fleet
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/beforeViolations
    - Parameter Reference: #/components/parameters/afterViolations
    - Parameter Reference: #/components/parameters/challengeRaisedBeforeViolations
    - Parameter Reference: #/components/parameters/challengeRaisedAfterViolations
    - Parameter Reference: #/components/parameters/challengeResolvedBeforeViolations
    - Parameter Reference: #/components/parameters/challengeResolvedAfterViolations
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/division
    - Parameter Reference: #/components/parameters/bookmarkedOnly
    - Parameter Reference: #/components/parameters/tagSearch
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/violations/aggregate
  - HTTP Method: get
    - Tag: Fleet
    - Summary: Aggregate Fleet Violations
    - Description: Aggregates the violations of a fleet
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/before
    - Parameter Reference: #/components/parameters/after
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/drivers/{driverId}/violations/aggregate
  - HTTP Method: get
    - Tag: Driver
    - Summary: Aggregate Driver Violations
    - Description: Aggregates the violations of a driver
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/driverId
    - Parameter Reference: #/components/parameters/before
    - Parameter Reference: #/components/parameters/after
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/drivers/{driverId}/violations
  - HTTP Method: get
    - Tag: Driver
    - Summary: List Driver Violations
    - Description: Lists the violations made by the driver.
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/driverId
    - Parameter Reference: #/components/parameters/beforeViolations
    - Parameter Reference: #/components/parameters/afterViolations
    - Parameter Reference: #/components/parameters/challengeRaisedBeforeViolations
    - Parameter Reference: #/components/parameters/challengeRaisedAfterViolations
    - Parameter Reference: #/components/parameters/challengeResolvedBeforeViolations
    - Parameter Reference: #/components/parameters/challengeResolvedAfterViolations
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/bookmarkedOnly
    - Parameter Reference: #/components/parameters/tagSearch
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/coaching-events
  - HTTP Method: get
    - Tag: Fleet
    - Summary: Coaching Event List
    - Description: List the coaching events of the fleet
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/beforeViolations
    - Parameter Reference: #/components/parameters/afterViolations
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/coachingCompleted
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/aggregate
  - HTTP Method: get
    - Tag: Fleet
    - Summary: Aggregate Fleet Trips
    - Description: Aggregates the trip and event counts of the fleet
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/groupBy
    - Parameter Reference: #/components/parameters/dutyType
    - Parameter Reference: #/components/parameters/division
    - Parameter Reference: #/components/parameters/before
    - Parameter Reference: #/components/parameters/after
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/limit
    - Response 200: 
    - Response 400: 
Path: /fleets/{fleetId}/uploadRequests
  - HTTP Method: get
    - Tag: Fleet
    - Summary: List Fleet DVR Requests
    - Description: Lists the DVR requests on the trips for the fleet
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/beforeDVR
    - Parameter Reference: #/components/parameters/afterDVR
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/bookmarkedOnlyDVR
    - Parameter Reference: #/components/parameters/tagSearchDVR
    - Parameter Reference: #/components/parameters/coachingCompletedDVR
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/drivers/{driverId}/uploadRequests
  - HTTP Method: get
    - Tag: Driver
    - Summary: List DVR Requests
    - Description: Lists the DVR requests on the trips taken by the driver
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/driverId
    - Parameter Reference: #/components/parameters/beforeDVR
    - Parameter Reference: #/components/parameters/afterDVR
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/bookmarkedOnlyDVR
    - Parameter Reference: #/components/parameters/tagSearchDVR
    - Parameter Reference: #/components/parameters/coachingCompletedDVR
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/edvr-requests/list
  - HTTP Method: get
    - Tag: Fleet
    - Summary: List EDVR Requests
    - Description: Lists the EDVR requests for a fleet
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/beforeEDVRUpdatedAt
    - Parameter Reference: #/components/parameters/afterEDVRUpdatedAt
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/sort
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/edvr-requests/aggregate
  - HTTP Method: get
    - Tag: Fleet
    - Summary: Aggregate EDVR requests
    - Description: Returns count of all EDVR requests for a fleet based on different statuses
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/beforeEDVRUpdatedAt
    - Parameter Reference: #/components/parameters/afterEDVRUpdatedAt
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/dvr-requests/aggregate
  - HTTP Method: get
    - Tag: Fleet
    - Summary: Aggregate DVR Requests
    - Description: Returns count of all DVR requests for a fleet based on different statuses
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/beforeDVRUpdatedAt
    - Parameter Reference: #/components/parameters/afterDVRUpdatedAt
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/external-events
  - HTTP Method: get
    - Tag: Fleet
    - Summary: List Fleet External Events
    - Description: Lists the external events made by the fleet
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/beforeViolations
    - Parameter Reference: #/components/parameters/afterViolations
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/bookmarkedOnly
    - Parameter Reference: #/components/parameters/tagSearch
    - Parameter Reference: #/components/parameters/coachingCompleted
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/external-events/aggregate
  - HTTP Method: get
    - Tag: Fleet
    - Summary: External Events Aggregate
    - Description: Returns count of all external events for a fleet.

    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/beforeViolations
    - Parameter Reference: #/components/parameters/afterViolations
    - Response 200: OK
    - Response 400: 
Path: /incorrect-camera-mounting/assets
  - HTTP Method: get
    - Tag: Fleet
    - Summary: List Assets with Incorrect Camera Mounting
    - Description: Provides the list of assets whose cameras were badly mounted resulting in ADAS event misses
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/drivers/{driverId}/trips/{tripId}
  - HTTP Method: get
    - Tag: Trip
    - Summary: Fetch Trip Details
    - Description: Returns the details of the trip identified by input tripId
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/driverId
    - Parameter Reference: #/components/parameters/tripId
    - Parameter Reference: #/components/parameters/customTripParams
    - Response 200: OK
    - Response 400: 
    - Response 404: No trip was found matching the input fleetId, driverId and tripId combination
Path: /trip-fr-feedback
  - HTTP Method: post
    - Tag: Trip
    - Summary: Trip FR Feedback
    - Description: Submit feedback on the trip's automatic face recognition
    - Response 200: OK
    - Response 400: 
    - Response 404: No trip was found matching the input tripId
Path: /fleets/{fleetId}/drivers/{driverId}/trips
  - HTTP Method: get
    - Tag: Driver
    - Summary: List Driver Trips
    - Description: Lists the trips taken by the driver.
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/driverId
    - Parameter Reference: #/components/parameters/after
    - Parameter Reference: #/components/parameters/before
    - Parameter Reference: #/components/parameters/division
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/customTripParams
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/drivers/{driverId}/aggregate
  - HTTP Method: get
    - Tag: Driver
    - Summary: Aggregate Driver Trips
    - Description: Aggregates the trip and event counts of the driver
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/driverId
    - Parameter Reference: #/components/parameters/dutyType
    - Parameter Reference: #/components/parameters/groupBy
    - Parameter Reference: #/components/parameters/after
    - Parameter Reference: #/components/parameters/before
    - Parameter Reference: #/components/parameters/division
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: 
    - Response 400: 
Path: /fleets/{fleetId}/drivers/{driverId}/trips/{tripId}/events/{eventIndex}
  - HTTP Method: get
    - Tag: Trip
    - Summary: Fetch Event Details
    - Description: Returns the details of the event identified by input trip ID and eventIndex
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/driverId
    - Parameter Reference: #/components/parameters/tripId
    - Response 200: OK
    - Response 400: 
    - Response 404: No event was found matching the input fleetId, driverId, tripId and eventIndex combination
Path: /fleets/{fleetId}/assets/{assetId}
  - HTTP Method: get
    - Tag: Assets
    - Summary: Asset Details
    - Description: Returns package configuration details for one asset.

    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/assetId
    - Response 200: OK
    - Response 400: 
    - Response 404: Not Found
Path: /assets
  - HTTP Method: get
    - Tag: Assets
    - Summary: All Assets List/History
    - Description: Returns the list of assets from <strong>all fleets</strong> which were active in the input time interval<br> <strong>Note:</strong> The rows in the result might not have unique asset IDs. If an asset's packages were modified, or if it was active during separate intervals with a period of inactivity between them, multiple instances of the same asset will appear in the result.<br> Assets' change history can be inferred using the <em>start</em> and <em>end</em> values in the result

    - Parameter Reference: #/components/parameters/assetsAfter
    - Parameter Reference: #/components/parameters/assetsBefore
    - Parameter Reference: #/components/parameters/activeOnly
    - Parameter Reference: #/components/parameters/currentOnly
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/assetSort
    - Parameter Reference: #/components/parameters/assetSortBy
    - Parameter Reference: #/components/parameters/bookmark
    - Response 200: 
    - Response 400: 
Path: /fleets/{fleetId}/assets
  - HTTP Method: get
    - Tag: Assets
    - Summary: Fleet Assets List/History
    - Description: Returns the list of assets in the input fleet which were active in the input time interval<br> <strong>Note:</strong> The rows in the result might not have unique asset IDs. If an asset's packages were modified, or if it was active during separate intervals with a period of inactivity between them, multiple instances of the same asset will appear in the result.<br> Assets' change history can be inferred using the <em>start</em> and <em>end</em> values in the result

    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/assetsAfter
    - Parameter Reference: #/components/parameters/assetsBefore
    - Parameter Reference: #/components/parameters/assetSort
    - Parameter Reference: #/components/parameters/assetSortBy
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/bookmark
    - Parameter Reference: #/components/parameters/fleetActiveOnly
    - Parameter Reference: #/components/parameters/fleetCurrentOnly
    - Response 200: OK
    - Response 400: 
  - HTTP Method: patch
    - Tag: Assets
    - Summary: Patch Fleet Assets
    - Description: Updates the assets specified in the input list<br> <strong>Only the fields which were specified in the request body will be updated (<em>tags</em> and <em>metadata</em> values are completely replaced if specified in the input)</strong><br> If an input asset (identified by <em>assetId</em>)  is not already registered, a new entry will be added<br> To deactivate assets set 'active' to false against their assetIds<br> If <em>active</em> is set to false in the input against an already inactive assetId, its fields will not be updated<br> This API can be used to update individual assets<br>

    - Parameter Reference: #/components/parameters/fleetId
    - Response 200: The update was partially/fully successful
    - Response 400: 
Path: /fleets/{fleetId}/assets/{assetId}/trips
  - HTTP Method: get
    - Tag: Assets
    - Summary: List Asset Trips
    - Description: Lists the trips taken by the asset
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/assetId
    - Parameter Reference: #/components/parameters/before
    - Parameter Reference: #/components/parameters/after
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/assets/{assetId}/violations
  - HTTP Method: get
    - Tag: Assets
    - Summary: List Asset Violations
    - Description: Lists the violations commited by the fleet with assetId.
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/assetId
    - Parameter Reference: #/components/parameters/beforeViolations
    - Parameter Reference: #/components/parameters/afterViolations
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/limit
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/assets/{assetId}/violations/aggregate
  - HTTP Method: get
    - Tag: Assets
    - Summary: Aggregate Asset Violations
    - Description: Aggregates the violations of a fleet with assetId.<br> Check this <a href="/docs/api-docs-v1-beta#tag/Assets/paths/~1fleets~1{fleetId}~1assets~1{assetId}~1aggregate~1violations/get">Asset Violations Aggregate API</a>

    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/assetId
    - Parameter Reference: #/components/parameters/beforeViolations
    - Parameter Reference: #/components/parameters/afterViolations
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/assets/{assetId}/aggregate/violations
  - HTTP Method: get
    - Tag: Assets
    - Summary: Asset Violations Aggregate
    - Description: Aggregates the violations of a fleet with assetId.
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/assetId
    - Parameter Reference: #/components/parameters/beforeViolations
    - Parameter Reference: #/components/parameters/afterViolations
    - Parameter Reference: #/components/parameters/groupByViolations
    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/assets/{assetId}/aggregate
  - HTTP Method: get
    - Tag: Assets
    - Summary: Aggregate Asset Trips
    - Description: Aggregates the trip and event counts of the asset
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/assetId
    - Parameter Reference: #/components/parameters/groupBy
    - Parameter Reference: #/components/parameters/after
    - Parameter Reference: #/components/parameters/before
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: 
    - Response 400: 
Path: /fleets/{fleetId}/devices/{deviceId}/trips
  - HTTP Method: get
    - Tag: Device State & Tracking
    - Summary: List Device Trips
    - Description: Lists the trips taken by the device
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/deviceId
    - Parameter Reference: #/components/parameters/before
    - Parameter Reference: #/components/parameters/after
    - Parameter Reference: #/components/parameters/sort
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: OK
Path: /fleets/{fleetId}/devices/{deviceId}/aggregate/trips
  - HTTP Method: get
    - Tag: Device State & Tracking
    - Summary: Aggregate Device Trips
    - Description: Aggregates the trip and event counts of the device
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/deviceId
    - Parameter Reference: #/components/parameters/groupBy
    - Parameter Reference: #/components/parameters/after
    - Parameter Reference: #/components/parameters/before
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: 
    - Response 400: 
Path: /dvr/create-upload-request
  - HTTP Method: post
    - Tag: DVR
    - Summary: Create Upload Request
    - Description: Registers an upload request for trip footage<br> One of <strong>driverId</strong> or <strong>assetId</strong> fields is required in the input<br> Status of upload requests can be fetched using the GET Trip Details API by passing the 'includeUploadRequests' query parameter  <br/><br/> A time-lapse version of the video can be fetched using the 'enableTimelapse' query parameter. <br/>General data cost of time-lapse video at various configurations for a one hour long video is mentioned below in the table: <br/>
<table border="0" style="border-collapse: collapse; width: 100%; border-color="#CCC" cellpadding="10"> <tbody> <tr> <td> Video Resolution </td><td> Video Quality </td><td> Capture Interval (in secs) </td><td> <p> <span style="font-weight: 400;" >Approximate video file size in MB<br/> (which is transferred to server)</span > </p></td></tr><tr> <td> 1280x720 </td><td> 10 </td><td> 1 </td><td> 100 </td></tr><tr> <td> 1280x720 </td><td> 1 </td><td> 1 </td><td> 65 </td></tr><tr> <td> 1280x720 </td><td> 10 </td><td> 10 </td><td> 10 </td></tr><tr> <td> 1280x720 </td><td> 1 </td><td> 10 </td><td> 6.5 </td></tr><tr> <td> 640x360 </td><td> 10 </td><td> 1 </td><td> 45 </td></tr><tr> <td> 640x360 </td><td> 1 </td><td> 1 </td><td> 22 </td></tr><tr> <td> 640x360 </td><td> 10 </td><td> 10 </td><td> 4.5 </td></tr><tr> <td> 640x360 </td><td> 1 </td><td> 10 </td><td> 2.2 </td></tr><tr> <td> 320x180 </td><td> 10 </td><td> 1 </td><td> 15 </td></tr><tr> <td> 320x180 </td><td> 1 </td><td> 1 </td><td> 9 </td></tr><tr> <td> 320x180 </td><td> 10 </td><td> 10 </td><td> 1.5 </td></tr><tr> <td> 320x180 </td><td> 1 </td><td> 10 </td><td> 1 </td></tr></tbody></table>
<br/> <strong>Note:</strong> Video-duration is determined by the start and stop time provided in the DVR request. For a time-lapse of entire trip, the video-duration is the trip-duration. <br/><br/> <strong>Note:</strong>The data size of the time-lapse video scales directly with the capture-interval. Display interval has no bearing on the final video size. However it governs the time-lapse video duration. <br/><br/> <strong>Note:</strong> Starting from APK version 1.7.0, "oldestDvrTimestamp" is available via <a href="/docs/device#tag/Device-State-and-Tracking/paths/~1device-management~1devices~1{deviceId}~1device-tracking-events/get">Device-Tracking-Events API</a> under the "Device-Storage" event type. Input startTimeUTC must be greater than the oldestDvrTimestamp of the device, if available. This is to fail fast when the requested time range is not serviceable and avoid delayed `UNAVAILABLE` failures.<br><br>
<strong>Note:</strong> Starting from APK version 1.14.0, collage based DVR is supported.<br>

    - Response 200: OK
    - Response 400: 
    - Response 404: The trip does not exist or the trip does not have a valid notificationToken.
    - Response 406: Unsupported operation/input
Path: /dvr/create-event-video-upload-request
  - HTTP Method: post
    - Tag: DVR
    - Summary: Create Event Video Upload Request
    - Description: Registers an upload request for event video<br> Status of upload requests can be fetched using the GET Trip Details API by passing the 'includeViolations' query parameter

    - Response 200: OK
    - Response 400: 
Path: /asset-plans/{cameraType}
  - HTTP Method: get
    - Tag: Assets
    - Summary: Asset Plans
    - Description: Returns all the eligible plans for a given camera type.

    - Response 200: OK
    - Response 400: 
Path: /dvr/archive-video-on-device
  - HTTP Method: post
    - Tag: DVR
    - Summary: Create Archive Request
    - Description: Registers an archive request for trip footage.<br> This feature is available with SDK v4.1.0 (APK v1.4.0) and above.

    - Response 200: OK
    - Response 400: 
Path: /fleets/{fleetId}/drivers/{driverId}/trips/{tripId}/uploadRequests/{uploadRequestId}
  - HTTP Method: get
    - Tag: DVR
    - Summary: Fetch Upload Request Details
    - Description: Returns the details of the upload request identified by input trip ID and uploadRequestId
    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/driverId
    - Parameter Reference: #/components/parameters/tripId
    - Response 200: OK
    - Response 400: 
    - Response 404: No upload request was found matching the input fleetId, driverId, tripId and uploadRequestId combination
Path: /configuration
  - HTTP Method: get
    - Tag: SDK Configuration
    - Summary: Fetch Common SDK Configuration
    - Description: Returns the common SDK configuration<br> Common settings are used when fleet-level settings are not available (common dutyType1.speedingEnabled will be used when fleet-level dutyType1.speedingEnabled is not set)

    - Response 200: OK
  - HTTP Method: patch
    - Tag: SDK Configuration
    - Summary: Update Common SDK Configuration
    - Description: Updates the common SDK configuration with the input<br> Individual settings (such as speedingEnabled) specified in the input will replace existing settings(if any)<br> Existing settings for which a new value is not specified in the input will remain unchanged<br> Settings <em>explicitly</em> set to <strong>null</strong> in the input will be assigned system default values

    - Response 200: OK
    - Response 400: 
  - HTTP Method: put
    - Tag: SDK Configuration
    - Summary: Overwrite Common SDK Configuration
    - Description: Replaces the common SDK configuration with the input value<br>

    - Response 200: 
    - Response 400: 
Path: /fleets/{fleetId}/configuration
  - HTTP Method: get
    - Tag: SDK Configuration
    - Summary: Fetch Fleet SDK Configuration
    - Description: Returns the fleet's SDK configuration<br> If the 'excludeCommonConfig' parameter is <strong>true</strong>, response only includes settings defined at fleet-level<br> If the 'excludeCommonConfig' parameter is <strong>false</strong>, response includes settings 'inherited' from the common configuration

    - Parameter Reference: #/components/parameters/fleetId
    - Response 200: OK
    - Response 400: 
  - HTTP Method: patch
    - Tag: SDK Configuration
    - Summary: Update Fleet SDK Configuration
    - Description: Updates the fleet's SDK configuration with the input<br> Individual settings (such as speedingEnabled) specified in the input will replace existing settings, if any<br> Existing settings for which a new value is not specified in the input will remain unchanged<br> Settings <em>explicitly</em> set to <strong>null</strong> in the input will stay undefined and will be taken from the common configuration when needed

    - Parameter Reference: #/components/parameters/fleetId
    - Response 200: OK
    - Response 400: 
  - HTTP Method: put
    - Tag: SDK Configuration
    - Summary: Overwrite Fleet SDK Configuration
    - Description: Replaces the fleet's SDK configuration with the input

    - Parameter Reference: #/components/parameters/fleetId
    - Response 200: 
    - Response 400: 
Path: /fleets/{fleetId}/configuration/{assetId}
  - HTTP Method: patch
    - Tag: SDK Configuration
    - Summary: Update Asset SDK Configuration
    - Description: Updates the SDK settings for an individual asset.

    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/assetId
    - Response 200: 
    - Response 400: 
  - HTTP Method: get
    - Tag: SDK Configuration
    - Summary: Fetch Asset SDK Configuration
    - Description: Returns the package configuration and SDK settings for an individual asset <strong>if the asset is active</strong>.<br> The configuration for the asset's duty type is preferred. If that is unavailable, the configuration for the <em>default</em> duty type is returned.<br> Any settings not available in the fleet configuration are picked from the common configuration (common dutyType1.speedingEnabled is returned when fleet-level dutyType1.speedingEnabled is not set). If both `excludeAssetDetails` and `excludeFleetConfig` are true asset specific configuration will be returned if available.

    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/assetId
    - Response 200: OK
    - Response 400: 
    - Response 404: Asset is not active / asset does not exist
Path: /webhooks/register
  - HTTP Method: post
    - Tag: Webhook Registration
    - Summary: Register Webhook
    - Description: Saves a webhook URL that will be notified about specific events like DVR uploads and event video uploads<br> Only one webhook per event type will be recorded, which will be replaced upon calling the API with the same 'trigger' input<br> <strong>Note: Updates may take up to 5 minutes to be processed</strong>

    - Response 200: 
    - Response 400: 
Path: /webhooks
  - HTTP Method: get
    - Tag: Webhook Registration
    - Summary: List Webhooks
    - Description: Returns a list of registered webhooks
    - Response 200: OK
    - Response 400: 
Path: /webhooks/unsubscribe
  - HTTP Method: post
    - Tag: Webhook Registration
    - Summary: Unsubscribe
    - Description: Unsubscribes from webhooks of a specific trigger type.
    - Response 200: OK
    - Response 400: 
    - Response 404: No matching webhook trigger found
Path: /update-event-metadata
  - HTTP Method: patch
    - Tag: Trip
    - Summary: Update event metadata
    - Description: Add extra information to violation events of a trip<br> <strong>Only the fields which were specified in the request body will be updated (<em>tags</em> values are completely replaced if specified in the input)</strong><br>

    - Response 200: OK
    - Response 400: 
    - Response 404: Trip or violation not found
Path: /update-dvr-metadata
  - HTTP Method: patch
    - Tag: DVR
    - Summary: Update upload request metadata
    - Description: Add extra information to upload requests of a trip<br> <strong>Only the fields which were specified in the request body will be updated (<em>tags</em> values are completely replaced if specified in the input)</strong><br>

    - Response 200: OK
    - Response 400: 
    - Response 404: Trip or upload request not found
Path: /event-stream/common/messages
  - HTTP Method: get
    - Tag: Live Telematics
    - Summary: Fetch Messages
    - Description: Fetches message batch.<br> Reading messages automatically moves the cursor forward. To read them again, the cursor has to be reset using the Reset Cursor Position API.<br> Messages uploaded by devices will be available for seven days, after which they are deleted forever.<br> The internal message queue is a distributed system and the global order of messages is not maintained. However, all messages generated by any given device ID will be ordered by <em>ingestionTimestamp</em>.

    - Response 200: OK
    - Response 400: 
Path: /event-stream/common/reset-position
  - HTTP Method: post
    - Tag: Live Telematics
    - Summary: Reset Cursor Position
    - Description: Changes the reading position to a different position in the message queue.<br> One of <em>postition</em> and <em>timestamp</em> must be specified in the input

    - Response 200: 
    - Response 400: 
Path: /live/create-stream-request
  - HTTP Method: post
    - Tag: Livestreaming
    - Summary: Request Livestream
    - Description: Creates a livestreaming session and sends a notification to the selected device requesting live video upload.<br> <strong>One of tripId and deviceId is required in the input.</strong><br> Length of individual livestream instances is currently limited to 30 minutes.<br><br> <strong>Usage limits&colon; 100 minutes of viewing per device per month, with 24 hour data retention (updated 20th Dec 2021)</strong>. More minutes can be provisioned via the asset API (input field&colon; recurringLivestreamExtraMinutes).<br> Livestream minutes used are calculated as sum of (views on stream * stream upload duration). For example, on a device in a given month&colon; if one 10-minute livestream was viewed twice and another 15-minute livestream was viewed once, then the total minutes used on the device for that month will be (10 &#x2a; 2) + (15 &#x2a; 1) = 35 <br><br>

    - Response 200: OK
    - Response 400: 
    - Response 404: 
    - Response 406: 
    - Response 409: A different livestream session is already active on the device
Path: /live/hls-session
  - HTTP Method: post
    - Tag: Livestreaming
    - Summary: Review Livestream
    - Description: Generates a new livestreaming session URL on an existing (ongoing or finished) stream.<br> Calling this API will increment the view count on the requested livestream by one.<br> Note&colon; Livestreams <strong>cannot</strong> be reviewed 24 hrs after their creation.

    - Response 200: OK
    - Response 400: 
    - Response 404: 
Path: /live/stop-stream
  - HTTP Method: post
    - Tag: Livestreaming
    - Summary: Stop Stream
    - Description: Sends a notification to the device to stop video stream upload.

    - Response 200: 
    - Response 400: 
    - Response 404: 
    - Response 406: 
Path: /live/fleets/{fleetId}/streams/{streamRequestId}
  - HTTP Method: get
    - Tag: Livestreaming
    - Summary: Stream Details
    - Description: Returns livestream details and current status

    - Response 200: OK
    - Response 400: 
    - Response 404: 
Path: /live/fleets/{fleetId}/usage/{deviceId}
  - HTTP Method: get
    - Tag: Livestreaming
    - Summary: Usage (Device Level)
    - Description: Returns livestream usage metrics for input fleetId and deviceId

    - Parameter Reference: #/components/parameters/before
    - Parameter Reference: #/components/parameters/after
    - Response 200: OK
    - Response 400: 
Path: /user-preferences
  - HTTP Method: get
    - Tag: User Preferences
    - Summary: Fetch Common User Preferences
    - Description: Returns the common user preferences that apply to all fleets unless overridden at fleet or driver level

    - Parameter Reference: #/components/parameters/UPIncludeDefaults
    - Response 200: OK
    - Response 400: 
  - HTTP Method: patch
    - Tag: User Preferences
    - Summary: Update Common User Preferences
    - Description: Updates the common user preferences that apply to all fleets unless overridden at fleet or driver level.

    - Response 200: 
    - Response 400: 
Path: /user-preferences/fleets/{fleetId}
  - HTTP Method: get
    - Tag: User Preferences
    - Summary: Fetch Fleet Preferences
    - Description: Returns fleet-level user preferences that apply to all drivers in the fleet unless overridden at driver level

    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/UPIncludeDefaults
    - Response 200: OK
    - Response 400: 
  - HTTP Method: patch
    - Tag: User Preferences
    - Summary: Update Fleet Preferences
    - Description: Updates fleet-level user preferences that apply to all drivers in the fleet unless overridden at driver level

    - Parameter Reference: #/components/parameters/fleetId
    - Response 200: 
    - Response 400: 
Path: /user-preferences/fleets/{fleetId}/drivers/{driverId}
  - HTTP Method: get
    - Tag: User Preferences
    - Summary: Fetch Driver Preferences
    - Description: Returns driver-level user preferences

    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/driverId
    - Parameter Reference: #/components/parameters/UPIncludeDefaults
    - Response 200: OK
    - Response 400: 
  - HTTP Method: patch
    - Tag: User Preferences
    - Summary: Update Driver Preferences
    - Description: Updates driver-level user preferences

    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/driverId
    - Response 200: 
    - Response 400: 
Path: /device-management/valid-vendors
  - HTTP Method: get
    - Tag: Provisioning
    - Summary: List Valid Vendors
    - Description: Valid vendor IDs for device provisioning
    - Response 200: OK
Path: /device-management/devices
  - HTTP Method: get
    - Tag: Provisioning
    - Summary: List Devices
    - Description: Returns a list of registered devices
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/semiProvisioned
    - Response 200: OK
    - Response 400: 
Path: /device-management/devices-aggregate
  - HTTP Method: get
    - Tag: Provisioning
    - Summary: Aggregate Devices
    - Description: Aggregates the registered devices
    - Parameter Reference: #/components/parameters/semiProvisioned
    - Response 200: OK
    - Response 400: 
Path: /device-management/devices/{deviceId}
  - HTTP Method: get
    - Tag: Provisioning
    - Summary: Device Details
    - Description: Returns the details of the device identified by input device ID
    - Parameter Reference: #/components/parameters/deviceId
    - Response 200: OK
    - Response 400: 
    - Response 404: Device not found
Path: /device-management/provision-devices
  - HTTP Method: post
    - Tag: Provisioning
    - Summary: Provision Devices
    - Description: Provisions devices to a fleet and creates (or updates) corresponding assets. Assets created via this API will have a <em>partnerHardware&colon; true</em> flag and will be associated with the input device ID.<br><br>
If any input device ID is already provisioned to the same fleet and asset ID, no changes will be made against it.<br> If any input device ID is already provisioned to the same fleet but a different asset ID, the device ID will be  remapped with the input asset ID and returned in the <em>transfers</em> array in the response.<br> If any input device ID is already provisioned to a different fleet, it will be transferred to the input fleet and it will be returned in the response <em>transfers</em> array.<br><br>
Any inactive assets specified in the input will be changed to an <em>active</em> state.<br> Asset activation and deactivation via the PATCH Assets API will have no effect on the device ID mapping.

    - Response 200: 
    - Response 202: Accepted. Some device IDs transferred from a different fleet or were not recognized.
    - Response 400: 
Path: /device-management/deprovision-devices
  - HTTP Method: post
    - Tag: Provisioning
    - Summary: Deprovision Devices
    - Description: Removes any fleet or asset associations on input devices.<br>

    - Response 200: Success
    - Response 202: Accepted. Some device IDs were not recognized.
    - Response 400: 
Path: /device-management/devices/assign-fleet
  - HTTP Method: post
    - Tag: Provisioning
    - Summary: Assign Fleet
    - Description: Assigns fleetId to unprovisioned devices<br> If any input unprovisioned device ID is assigned to a different fleet, it will be transferred to the input fleet and it will be returned in the response <em>transfers</em> array.<br><br>
If any input device ID is already provisioned, and if there is any change in the metadata then only metadata will be updated  else no changes will be made against it.<br>

    - Response 200: 
    - Response 202: Accepted. Some device IDs were not recognized.
    - Response 400: 
Path: /device-management/fleets/{fleetId}/update-fleet-state
  - HTTP Method: post
    - Tag: Provisioning
    - Summary: Update Fleet State
    - Description: Changes the state of the fleet.<br> Devices belonging to `DISABLED` fleets will not be allowed to use LM services and hence cannot upload trip data to the cloud. Such devices will still record trips and store information locally for ten days, after which no new trips will be recorded. All trip data saved on the devices will be purged sixty days after the fleet is disabled. Trip data previously uploaded to the cloud will still be available. When a fleet is re-enabled, devices will start functioning normally again and any data on their disks that is not already in the cloud is then uploaded.<br> All fleets are `ENABLED` by default.

    - Parameter Reference: #/components/parameters/fleetId
    - Response 200: 
    - Response 400: 
Path: /device-management/fleets/{fleetId}/fleet-state
  - HTTP Method: get
    - Tag: Provisioning
    - Summary: Fleet State History
    - Description: Returns history log of fleet state changes.<br> If the most recent state is `ENABLED` or if there are no entries in the <em>rows</em> list in the response, then the fleet is considered active. If not, the fleet is considered `DISABLED` and devices belonging to the fleet will not be allowed to use LM services.

    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: OK
    - Response 400: 
Path: /device-management/remote-control
  - HTTP Method: post
    - Tag: Device State & Tracking
    - Summary: Remote Control
    - Description: Remotely performs a specified action on the device by sending a push notification to the device.
    - Response 200: OK
    - Response 400: 
Path: /device-management/devices/:deviceId/update-mdvr-config
  - HTTP Method: patch
    - Tag: Provisioning
    - Summary: Update MDVR Configuration
    - Description: Updates the MDVR configuration for a device.<br> The MDVR feature is not supported in all the device-models. Please contact Lightmetrics for more information.

    - Response 200: 
Path: /device-management/remote-control/{rcRequestId}
  - HTTP Method: get
    - Tag: Device State & Tracking
    - Summary: Remote Control Status
    - Description: Returns the details of the requested remote control action.
    - Response 200: OK
    - Response 400: 
    - Response 404: RequestId not found
Path: /device-management/devices/unprovisioned-status
  - HTTP Method: get
    - Tag: Device State & Tracking
    - Summary: Unprovisioned Devices Status
    - Description: Lists the unprovisioned devices communicating with the API servers.<br> Data can be fetched only for last <strong>14 days</strong>.

    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: OK
    - Response 400: 
Path: /device-management/software/{softwareId}/releases
  - HTTP Method: get
    - Tag: Software Updates
    - Summary: List Software Versions
    - Description: Returns a list of software versions available.</br> Software builds will be different for different device models.

    - Parameter Reference: #/components/parameters/softwareId
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: OK
    - Response 400: 
Path: /device-management/approve-software
  - HTTP Method: post
    - Tag: Software Updates
    - Summary: Approve Software
    - Description: Sign off on a software version, making it available to devices to download.
    - Response 200: 
    - Response 202: Accepted. Some input device IDs were unrecognized.
    - Response 400: 
    - Response 404: Not found
Path: /device-management/revoke-software
  - HTTP Method: post
    - Tag: Software Updates
    - Summary: Revoke Approved Sofwtare
    - Description: Revokes already approved software globally or for individual devices.
    - Response 200: 
    - Response 400: 
    - Response 406: Globally approved software version cannot be revoked for individual devices.
Path: /device-management/software/softwareIds
  - HTTP Method: get
    - Tag: Software Updates
    - Summary: List Software Channels
    - Description: Returns the list of all the available software channels.

    - Response 200: OK
Path: /device-management/request-companion-connection
  - HTTP Method: post
    - Tag: Device State & Tracking
    - Summary: Request Companion Connection
    - Description: Returns signedToken along with expiry based on the input.

    - Response 200: OK
    - Response 400: 
    - Response 404: 
Path: /dvr/create-capture-image-request
  - HTTP Method: post
    - Tag: DVR
    - Summary: Request Image Capture
    - Description: Requests specified device to capture and upload an image.<br> At most four requests per device per hour should be generated. Any more than that are liable to get throttled.<br><br>
<strong>Note:</strong> Starting from APK version <strong>1.14.0</strong>, MultiView images are supported.<br>

    - Response 200: OK
    - Response 400: 
    - Response 404: The trip does not exist or the trip does not have a valid notificationToken.
    - Response 406: Unsupported operation/input
Path: /device-management/devices/{deviceId}/clear-driver-state
  - HTTP Method: post
    - Tag: Device State & Tracking
    - Summary: Clear Driver State
    - Description: Remotely clears saved driver state (driver ID and driver name) from the specified device
    - Parameter Reference: #/components/parameters/deviceId
    - Response 200: OK
Path: /device-management/devices/{deviceId}/clear-driver-state-notification-status/{notificationId}
  - HTTP Method: get
    - Tag: Device State & Tracking
    - Summary: Clear Driver State Request Details
    - Description: Detail of the clear driver state request
    - Parameter Reference: #/components/parameters/deviceId
    - Parameter Reference: #/components/parameters/notificationId
    - Response 200: OK
    - Response 400: 
    - Response 404: Clear driver state request not found
Path: /device-management/devices/{deviceId}/image-upload-requests/{uploadRequestId}
  - HTTP Method: get
    - Tag: DVR
    - Summary: Captured Image Details
    - Description: Returns the details of the captured image.

    - Parameter Reference: #/components/parameters/deviceId
    - Parameter Reference: #/components/parameters/uploadRequestId
    - Response 200: OK
    - Response 400: 
    - Response 404: Image upload request not found
Path: /device-management/devices/{deviceId}/device-tracking-events
  - HTTP Method: get
    - Tag: Device State & Tracking
    - Summary: Device Tracking Events
    - Description: Returns list of device events generated in the input time range.<br> Data can be fetched only for last <strong>30 days</strong> or maximum of <strong>10000</strong> events per device whichever happens first.

    - Parameter Reference: #/components/parameters/deviceId
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Parameter Reference: #/components/parameters/deviceEventsBefore
    - Parameter Reference: #/components/parameters/deviceEventsAfter
    - Response 200: OK
    - Response 400: 
Path: /device-management/reports/devices
  - HTTP Method: get
    - Tag: Device State & Tracking
    - Summary: List Devices
    - Description: Returns a list of devices with diagnostics info.

    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: OK
Path: /device-management/reports/devices/{deviceId}
  - HTTP Method: get
    - Tag: Device State & Tracking
    - Summary: Device Diagnostic Report
    - Description: Returns the device's full diagnostic report with signals info.

    - Parameter Reference: #/components/parameters/deviceId
    - Response 200: OK
    - Response 400: 
    - Response 404: The device diagnostics info does not exist.
Path: /device-management/reports/aggregate
  - HTTP Method: get
    - Tag: Device State & Tracking
    - Summary: Aggregate Device Reports
    - Description: Aggregates the device reports.

    - Response 200: OK
Path: /dvr/create-image-upload-request
  - HTTP Method: post
    - Tag: DVR
    - Summary: Create DVR Image Request
    - Description: Registers an image upload request for trip footage<br> One of <strong>driverId</strong> or <strong>assetId</strong> fields is required in the input<br> Status of upload requests can be fetched using the GET  Details API.
<strong>Note:</strong> Starting from APK version 1.7.0, "oldestDvrTimestamp" is available via <a href="/docs/device#tag/Device-State-and-Tracking/paths/~1device-management~1devices~1{deviceId}~1device-tracking-events/get">Device-Tracking-Events API</a> under the "Device-Storage" event type. Input captureTimeUTC must be greater than the oldestDvrTimestamp of the device, if available. This is to fail fast when the requested time range is not serviceable and avoid delayed `UNAVAILABLE` failures.<br><br>
<strong>Note:</strong> Starting from APK version 1.14.0, collage based DVR is supported.<br>

    - Response 200: OK
    - Response 400: 
    - Response 404: The trip does not exist or the trip does not have a valid notificationToken.
Path: /device-management/devices/{deviceId}/dvr-image-upload-request/{uploadRequestId}
  - HTTP Method: get
    - Tag: DVR
    - Summary: DVR Image Details
    - Description: Returns the details of the captured dvr image.

    - Parameter Reference: #/components/parameters/deviceId
    - Parameter Reference: #/components/parameters/uploadRequestId
    - Response 200: OK
    - Response 400: 
    - Response 404: Image upload request not found
Path: /device-management/devices/{deviceId}/toggle-lane-calibration
  - HTTP Method: post
    - Tag: Device State & Tracking
    - Summary: Toggle Lane Calibration
    - Description: Toggles the lane calibration.  <strong>Note:</strong> Available for APK version 1.9.0 and above.

    - Parameter Reference: #/components/parameters/deviceId
    - Response 200: 
    - Response 400: 
Path: /device-management/devices/{deviceId}/lane-calibration
  - HTTP Method: get
    - Tag: Device State & Tracking
    - Summary: Device Lane Calibration Status
    - Description: Returns the current saved lane calibration status on the device
    - Parameter Reference: #/components/parameters/deviceId
    - Response 200: OK
    - Response 400: 
Path: /device-management/devices/{deviceId}/toggle-outpin-signal
  - HTTP Method: post
    - Tag: Device State & Tracking
    - Summary: Toggle Device OutPin Signal
    - Description: Toggles the device outpin signal. <strong>Note:</strong> Available for APK version 1.9.0 and above.

    - Parameter Reference: #/components/parameters/deviceId
    - Response 200: OK
    - Response 400: 
Path: /device-management/devices/{deviceId}/outpin-signal
  - HTTP Method: get
    - Tag: Device State & Tracking
    - Summary: Device Outpin Signal
    - Description: Returns the current saved device outpin signal info.
    - Parameter Reference: #/components/parameters/deviceId
    - Response 200: OK
    - Response 400: 
Path: /device-management/devices/{deviceId}/tasks
  - HTTP Method: post
    - Tag: Device State & Tracking
    - Summary: Trigger Device Task
    - Description: Triggers the specified device task.

    - Parameter Reference: #/components/parameters/deviceId
    - Response 200: 
    - Response 400: 
  - HTTP Method: get
    - Tag: Device State & Tracking
    - Summary: Device Task Status
    - Description: Status of the triggered device task.

    - Parameter Reference: #/components/parameters/deviceId
    - Response 200: OK
Path: /face-recognition/groups/{groupId}/generate-sample-urls
  - HTTP Method: post
    - Tag: Face Recognition
    - Summary: Generate Sample URLs
    - Description: Generates sample URLs and corresponding sample IDs for uploading driver images.
    - Parameter Reference: #/components/parameters/frGroupIdPathParam
    - Response 200: OK
    - Response 400: 
Path: /face-recognition/enroll
  - HTTP Method: post
    - Tag: Face Recognition
    - Summary: Enroll Person
    - Description: Enrolls a new person to a group using input media samples.<br> Call this API <strong>after</strong> uploading driver images to the URLs generated using the POST Generate Sample URLs API.

    - Response 200: OK
    - Response 400: Invalid input / bad samples
    - Response 404: Sample(s) not found
    - Response 409: Media samples too similar to previously enrolled person
Path: /face-recognition/groups/{groupId}/persons/{personId}
  - HTTP Method: get
    - Tag: Face Recognition
    - Summary: Fetch Person Details
    - Description: 
    - Parameter Reference: #/components/parameters/frGroupIdPathParam
    - Parameter Reference: #/components/parameters/frPersonIdPathParam
    - Response 200: OK
    - Response 400: 
    - Response 404: Person not enrolled
  - HTTP Method: patch
    - Tag: Face Recognition
    - Summary: Modify Person Details
    - Description: Modifies samples and metadata corresponding to input person ID
    - Parameter Reference: #/components/parameters/frGroupIdPathParam
    - Parameter Reference: #/components/parameters/frPersonIdPathParam
    - Response 200: 
    - Response 409: Media samples too similar to different previously enrolled person
    - Response 400: 
    - Response 404: Sample(s) not found / person not enrolled
  - HTTP Method: delete
    - Tag: Face Recognition
    - Summary: Delete Person Details
    - Description: Deletes metadata <strong>and all saved media samples of the person</strong>
    - Parameter Reference: #/components/parameters/frGroupIdPathParam
    - Parameter Reference: #/components/parameters/frPersonIdPathParam
    - Response 200: 
    - Response 400: 
    - Response 404: Person not enrolled
Path: /face-recognition/groups/{groupId}/persons
  - HTTP Method: get
    - Tag: Face Recognition
    - Summary: List Group Persons
    - Description: 
    - Parameter Reference: #/components/parameters/frGroupIdPathParam
    - Parameter Reference: #/components/parameters/limit
    - Parameter Reference: #/components/parameters/skip
    - Response 200: OK
    - Response 400: 
Path: /user-permissions
  - HTTP Method: get
    - Tag: User Permissions
    - Summary: Fetch Common User Permissions
    - Description: Returns the saved common user permissions that apply to all fleets unless overridden at fleet or driver level

    - Response 200: OK
    - Response 400: 
  - HTTP Method: patch
    - Tag: User Permissions
    - Summary: Update Common User Permissions
    - Description: Updates the common user permissions that apply to all fleets unless overridden at fleet or driver level.

    - Response 200: 
    - Response 400: 
Path: /user-permissions/fleets/{fleetId}
  - HTTP Method: get
    - Tag: User Permissions
    - Summary: Fetch Fleet Permissions
    - Description: Returns fleet-level user permissions that apply to all drivers in the fleet unless overridden at driver level

    - Parameter Reference: #/components/parameters/fleetId
    - Response 200: OK
    - Response 400: 
  - HTTP Method: patch
    - Tag: User Permissions
    - Summary: Update Fleet Permissions
    - Description: Updates fleet-level user permissions that apply to all drivers in the fleet unless overridden at driver level

    - Parameter Reference: #/components/parameters/fleetId
    - Response 200: 
    - Response 400: 
Path: /user-permissions/fleets/{fleetId}/drivers/{driverId}
  - HTTP Method: get
    - Tag: User Permissions
    - Summary: Fetch Driver Permissions
    - Description: Returns driver-level user permissions

    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/driverId
    - Response 200: OK
    - Response 400: 
  - HTTP Method: patch
    - Tag: User Permissions
    - Summary: Update Driver Permissions
    - Description: Updates driver-level user permissions

    - Parameter Reference: #/components/parameters/fleetId
    - Parameter Reference: #/components/parameters/driverId
    - Response 200: 
    - Response 400: 
Path: /evaluate/user-permissions
  - HTTP Method: get
    - Tag: User Permissions
    - Summary: Evaluate User Permissions
    - Description: Evaluates the user permissions saved at each level and returns the permissions.

    - Response 200: OK
    - Response 400: 
